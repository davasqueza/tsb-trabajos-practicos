#BlueJ class context
comment0.target=SimpleList()
comment0.text=\nConstructor\ por\ defecto\n\n
comment1.target=int\ size()
comment1.text=\nRetorna\ el\ n\u00FAmero\ de\ elementos\ de\ la\ lista.\n@return\ el\ n\u00FAmero\ de\ elementos\ que\ contiene\ la\ lista.\n\n
comment10.target=boolean\ isEmpty()
comment10.text=\nRetorna\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa.\n@return\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa\ -\ false\ en\ caso\ contrario.\n\n
comment11.target=Comparable\ next()
comment11.text=\nRetorna\ el\ siguiente\ objeto\ en\ el\ recorrido\ del\ iterador.\ Se\ incorpora\ para\ cumplir\ nuestra\ \nimplementaci\u00F3n\ liviana\ del\ patr\u00F3n\ Iterator.\ Corresponde\ al\ m\u00E9todo\ next()\ de\ la\ clase\ Iterator\ \ndel\ lenguaje\ Java.\n@return\ el\ siguiente\ objeto\ en\ el\ recorrido.\n@throws\ NoSuchElementException\ si\ la\ lista\ est\u00E1\ vac\u00EDa\ o\ en\ la\ lista\ no\ quedan\ elementos\ por\ recorrer.\n\n
comment12.params=x
comment12.target=boolean\ remove(Comparable)
comment12.text=\nRemueve\ el\ objeto\ x\ de\ la\ lista.\ Retorna\ true\ si\ puede\ hacerlo,\ o\ false\ en\ caso\ contrario.\n@param\ x\ el\ objeto\ que\ se\ desea\ eliminar\ de\ la\ lista.\n@return\ true\ si\ la\ lista\ conten\u00EDa\ a\ x\ y\ pudo\ eliminarlo.\n\n
comment13.target=Comparable\ removeLast()
comment13.text=\nRetorna\ (y\ remueve)\ el\ objeto\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ el\ \u00FAltimo\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment14.target=Comparable\ removeFirst()
comment14.text=\nRetorna\ (y\ remueve)\ el\ objeto\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ el\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment15.params=x
comment15.target=Comparable\ search(Comparable)
comment15.text=\nBusca\ un\ objeto\ x\ en\ la\ lista,\ y\ en\ caso\ de\ encontrarlo\ retorna\ una\ referencia\ al\ objeto\ \nque\ EST\u00C1\ EN\ LA\ LISTA.\ Retorna\ null\ si\ x\ no\ est\u00E1\ en\ la\ lista\ o\ si\ x\ es\ null\ o\ si\ x\ no\ es\ncompatible\ con\ el\ contenido\ de\ la\ lista\n\n
comment16.target=void\ startIterator()
comment16.text=\nInicializa\ el\ mecanismo\ de\ recorrido.\ Hace\ que\ la\ pr\u00F3xima\ invocaci\u00F3n\ a\ next()\ retorne\ el\ primer\ objeto\ de\nla\ lista.\ Forma\ parte\ de\ nuestra\ implementaci\u00F3n\ liviana\ del\ patr\u00F3n\ Iterator.\ En\ la\ clase\ LinkedList\ de\ Java,\ \nnuestro\ m\u00E9todo\ ser\u00EDa\ equivalente\ a\ invocar\ al\ m\u00E9todo\ iterator(),\ el\ cual\ retorna\ un\ objeto\ de\ la\ clase\ \nIterator\ (predefinida\ de\ Java).\ Decidimos\ cambiar\ el\ nombre\ por\ razones\ de\ claridad.\n\n
comment17.target=String\ toString()
comment17.text=\nRedefine\ el\ m\u00E9todo\ toString\ heredado\ desde\ Object.\n@return\ el\ contenido\ de\ la\ lista\ convertido\ a\ String.\n\n
comment18.params=x
comment18.target=boolean\ isHomogeneus(Comparable)
comment2.params=x
comment2.target=void\ addFirst(Comparable)
comment2.text=\nInserta\ un\ objeto\ al\ principio\ de\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null\ y\ si\ el\ objeto\ representado\ es\ compatible\ con\ el\ contenido\ actual\ de\ la\ lista\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment3.params=x
comment3.target=void\ addInOrder(Comparable)
comment3.text=\nInserta\ un\ objeto\ en\ forma\ ordenada\ en\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null\ y\ si\ el\ objeto\ representado\ es\ compatible\ con\ el\ contenido\ actual\ de\ la\ lista.\ Se\ supone\ \nque\ la\ est\u00E1\ ya\ ordenada\ (es\ decir,\ se\ supone\ que\ todas\ las\ inserciones\ fueron\ realizadas\ llamando\ a\neste\ m\u00E9todo).\ Este\ m\u00E9todo\ no\ viene\ en\ la\ clase\ LinkedList\ tomada\ como\ modelo\ para\ el\ planteo\ realizado\nen\ clase\ de\ SimpleList\:\ se\ incorpora\ desde\ la\ materia\ TSB\ por\ tratarse\ de\ un\ algoritmo\ cl\u00E1sico\ e\ interesante.\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment4.params=x
comment4.target=void\ addLast(Comparable)
comment4.text=\nInserta\ un\ objeto\ al\ final\ de\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null\ y\ si\ el\ objeto\ representado\ es\ compatible\ con\ el\ contenido\ actual\ de\ la\ lista\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment5.target=void\ clear()
comment5.text=\nRemueve\ todos\ los\ elementos\ de\ la\ lista.\n\n
comment6.params=x
comment6.target=boolean\ contains(Comparable)
comment6.text=\nDetermina\ si\ en\ la\ lista\ existe\ un\ elemento\ que\ coincida\ con\ x.\ Usamos\ compareTo()\ para\nrealizar\ las\ comparaciones\ (aunque\ podr\u00EDa\ usarse\ equals()).\n@return\ true\ si\ x\ est\u00E1\ en\ la\ lista\ -\ false\ si\ x\ no\ est\u00E1\ o\ si\ x\ es\ null.\n@param\ x\ el\ objeto\ a\ buscar.\n\n
comment7.target=Comparable\ getFirst()
comment7.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ objeto\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ una\ referencia\ al\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment8.target=Comparable\ getLast()
comment8.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ objeto\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ una\ referencia\ al\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment9.target=boolean\ hasNext()
comment9.text=\nIndica\ si\ queda\ alg\u00FAn\ objeto\ en\ el\ recorrido\ del\ iterador.\ Se\ incorpora\ para\ cumplir\ nuestra\ \nimplementaci\u00F3n\ liviana\ del\ patr\u00F3n\ Iterator.\ Corresponde\ al\ m\u00E9todo\ hasNext()\ de\ la\ clase\nIterator\ del\ lenguaje\ Java.\n@return\ true\ si\ queda\ alg\u00FAn\ objeto\ en\ el\ recorrido\ -\ false\ si\ no\ quedan\ objetos.\n\n
numComments=19
