#BlueJ class context
comment0.target=Grafo()
comment0.text=\nInicializa\ el\ grafo\ para\ un\ m\u00E1ximo\ de\ 10\ nodos.\n\n
comment1.params=n
comment1.target=Grafo(int)
comment1.text=\nInicializa\ el\ grafo\ para\ un\ m\u00E1ximo\ de\ n\ nodos.\n@param\ n\ el\ n\u00FAmero\ m\u00E1ximo\ de\ nodos\ que\ ser\u00E1n\ representados\ en\ este\ grafo.\n\n
comment10.target=boolean[][]\ getMatrizCierre()
comment10.text=\nRetorna\ la\ matriz\ de\ cierre\ transitivo\ del\ grafo,\ tal\ como\ est\u00E1\ en\ ese\ momento\ en\ el\ grafo.\n@return\ la\ matriz\ de\ cierre\ transitivo.\n\n
comment11.target=Object[]\ ordenTopologico()
comment11.text=\nDetermina\ si\ el\ grafo\ tiene\ un\ orden\ topol\u00F3gico\ y\ lo\ calcula.\n@return\ un\ arreglo\ de\ objetos\ ordenados\ en\ forma\ topol\u00F3gica,\ si\ tal\ orden\ es\ posible,\ o\ null\ en\ caso\ contrario.\n\n
comment12.target=boolean\ ciclos()
comment12.text=\nDetermina\ si\ el\ grafo\ tiene\ ciclos.\nreturn\ true\ si\ hay\ alg\u00FAn\ ciclo\ -\ false\ en\ caso\ contrario\n\n
comment13.target=String\ toString()
comment13.text=\nRedefinici\u00F3n\ del\ m\u00E9todo\ heredado\ desde\ Object\n@return\ el\ contenido\ del\ grafo\ en\ forma\ de\ String,\ incluyendo\ la\ matriz\ de\ cierre\ transitivo\n\n
comment14.params=n1
comment14.target=int\ buscar(Object)
comment15.params=k\ visitados\ sort
comment15.target=void\ visitar1(int,\ boolean[],\ Object[])
comment2.target=int\ length()
comment2.text=\nIndica\ la\ cantidad\ de\ nodos\ representados\ en\ este\ grafo.\n@return\ la\ cantidad\ de\ nodos\ del\ grafo.\n\n
comment3.params=n1\ n2
comment3.target=boolean\ unir(Object,\ Object)
comment3.text=\nPermite\ unir\ dos\ nodos\ n1\ y\ n2\ con\ un\ arco\ cuyo\ factor\ de\ peso\ se\ asume\ igual\ a\ cero.\ El\ arco\ partir\u00E1\ del\ nodo\ n1\ y\ llegar\u00E1\ al\ \nnodo\ n2\ en\ caso\ de\ poder\ hacerse\ la\ uni\u00F3n.\ Si\ alguno\ de\ los\ nodos\ n1\ o\ n2\ no\ existe\ en\ el\ grafo,\ la\ operaci\u00F3n\ no\ se\ llevar\u00E1\ a\ \ncabo.\ Lo\ mismo\ vale\ si\ los\ objetos\ n1\ o\ n2\ no\ son\ de\ la\ misma\ clase\ que\ los\ objetos\ que\ ya\ est\u00E1n\ en\ el\ grafo.\n@param\ n1\ el\ nodo\ de\ partido\ del\ arco.\n@param\ n2\ el\ nodo\ de\ llegada\ del\ arco.\n@return\ true\ si\ la\ operaci\u00F3n\ se\ llev\u00F3\ a\ cabo\ -\ false\ en\ caso\ contrario.\n\n
comment4.params=n1\ n2\ p
comment4.target=boolean\ unir(Object,\ Object,\ int)
comment4.text=\nPermite\ unir\ dos\ nodos\ n1\ y\ n2\ con\ un\ arco\ cuyo\ factor\ de\ peso\ ser\u00E1\ igual\ a\ p.\ El\ arco\ partir\u00E1\ del\ nodo\ n1\ y\ llegar\u00E1\ al\ \nnodo\ n2\ en\ caso\ de\ poder\ hacerse\ la\ uni\u00F3n.\ Si\ alguno\ de\ los\ nodos\ n1\ o\ n2\ no\ existe\ en\ el\ grafo,\ la\ operaci\u00F3n\ no\ se\ llevar\u00E1\ a\ \ncabo.\ Lo\ mismo\ vale\ si\ los\ objetos\ n1\ o\ n2\ no\ son\ de\ la\ misma\ clase\ que\ los\ objetos\ que\ ya\ est\u00E1n\ en\ el\ grafo.\n@param\ n1\ el\ nodo\ de\ partido\ del\ arco.\n@param\ n2\ el\ nodo\ de\ llegada\ del\ arco.\n@param\ p\ el\ peso\ del\ arco\ que\ unir\u00E1\ a\ n1\ y\ n2.\n@return\ true\ si\ la\ operaci\u00F3n\ se\ llev\u00F3\ a\ cabo\ -\ false\ en\ caso\ contrario.\n\n
comment5.params=n1\ n2
comment5.target=boolean\ cortar(Object,\ Object)
comment5.text=\nPermite\ cortar\ el\ arco\ que\ une\ a\ los\ nodos\ n1\ y\ n2,\ suponiendo\ que\ el\ arco\ part\u00EDa\ del\ nodo\ n1\ y\ llegaba\ al\ \nnodo\ n2.\ El\ peso\ del\ arco\ (si\ exist\u00EDa\ el\ arco)\ se\ perder\u00E1.\ Si\ alguno\ de\ los\ nodos\ n1\ o\ n2\ no\ existe\ en\ el\ grafo,\ \nla\ operaci\u00F3n\ no\ se\ llevar\u00E1\ a\ cabo.\ Lo\ mismo\ vale\ si\ los\ objetos\ n1\ o\ n2\ no\ son\ de\ la\ misma\ clase\ que\ los\ objetos\ \nque\ ya\ est\u00E1n\ en\ el\ grafo.\n@param\ n1\ el\ nodo\ de\ partido\ del\ arco.\n@param\ n2\ el\ nodo\ de\ llegada\ del\ arco.\n@return\ true\ si\ la\ operaci\u00F3n\ se\ llev\u00F3\ a\ cabo\ -\ false\ en\ caso\ contrario.\n\n
comment6.params=n1\ n2
comment6.target=boolean\ hayArco(Object,\ Object)
comment6.text=\nRetorna\ true\ si\ hab\u00EDa\ un\ arco\ que\ partiera\ de\ n1\ y\ llegara\ a\ n2,\ y\ false\ en\ caso\ contrario.\n@param\ n1\ Nodo\ de\ partida\ del\ arco\ chequeado.\n@param\ n2\ Nodo\ de\ llegada\ del\ arco\ chequeado.\n@return\ true\ si\ hab\u00EDa\ un\ arco\ partiendo\ de\ n1\ y\ llegando\ a\ n2\ -\ false\ en\ caso\ contrario.\n\n
comment7.params=n1\ n2
comment7.target=int\ getPeso(Object,\ Object)
comment7.text=\nRetorna\ el\ peso\ del\ arco\ que\ parte\ de\ n1\ y\ llega\ a\ n2\ (si\ tal\ arco\ existe),\ o\ retorna\ cero\ si\ el\ arco\ no\nexiste.\ Para\ evitar\ ambiguedades\ respecto\ del\ valor\ retornado,\ la\ invocaci\u00F3n\ a\ este\ m\u00E9todo\ deber\u00EDa\ ir\ \nprecedida\ de\ una\ invocaci\u00F3n\ al\ m\u00E9todo\ hayArco()\ para\ validar\ que\ el\ arco\ exista.\n@param\ n1\ Nodo\ de\ partida\ del\ arco\ chequeado.\n@param\ n2\ Nodo\ de\ llegada\ del\ arco\ chequeado.\n@return\ el\ peso\ del\ arco.\n\n
comment8.params=x
comment8.target=boolean\ setNodo(Object)
comment8.text=\nAsigna\ un\ nuevo\ nodo\ al\ grafo,\ comprobando\ homogeneidad\ y\ siempre\ y\ cuando\ haya\ lugar.\n@param\ x\ el\ objeto\ a\ agregar\ al\ grafo.\n@return\ true\ si\ el\ agregado\ se\ hizo\ -\ false\ si\ no\ se\ pudo\ hacer.\n\n
comment9.target=void\ cierre()
comment9.text=\nCalcula\ el\ cierre\ transitivo\ del\ grafo,\ usando\ el\ algoritmo\ de\ Warshall.\ \n\n
numComments=16
