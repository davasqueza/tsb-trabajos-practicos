#BlueJ class context
comment0.target=SimpleList()
comment0.text=\nConstructor\ por\ defecto\n\n
comment1.params=x
comment1.target=void\ addFirst(Comparable)
comment1.text=\nInserta\ un\ objeto\ al\ principio\ de\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null\ y\ si\ el\ objeto\ representado\ es\ compatible\ con\ el\ contenido\ actual\ de\ la\ lista\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment10.params=x
comment10.target=Comparable\ search(Comparable)
comment10.text=\nBusca\ un\ objeto\ x\ en\ la\ lista,\ y\ en\ caso\ de\ encontrarlo\ retorna\ una\ referencia\ al\ objeto\ \nque\ EST\u00C1\ EN\ LA\ LISTA.\ Retorna\ null\ si\ x\ no\ est\u00E1\ en\ la\ lista\ o\ si\ x\ es\ null\ o\ si\ x\ no\ es\ncompatible\ con\ el\ contenido\ de\ la\ lista\n\n
comment11.target=String\ toString()
comment11.text=\nRedefine\ el\ m\u00E9todo\ toString\ heredado\ desde\ Object.\n@return\ el\ contenido\ de\ la\ lista\ convertido\ a\ String.\n\n
comment12.params=x
comment12.target=boolean\ isHomogeneus(Comparable)
comment2.params=x
comment2.target=void\ addInOrder(Comparable)
comment2.text=\nInserta\ un\ objeto\ en\ forma\ ordenada\ en\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null\ y\ si\ el\ objeto\ representado\ es\ compatible\ con\ el\ contenido\ actual\ de\ la\ lista.\ Se\ supone\ \nque\ la\ est\u00E1\ ya\ ordenada\ (es\ decir,\ se\ supone\ que\ todas\ las\ inserciones\ fueron\ realizadas\ llamando\ a\neste\ m\u00E9todo).\ Este\ m\u00E9todo\ no\ viene\ en\ la\ clase\ LinkedList\ tomada\ como\ modelo\ para\ el\ planteo\ realizado\nen\ clase\ de\ SimpleList\:\ se\ incorpora\ desde\ la\ materia\ TSB\ por\ tratarse\ de\ un\ algoritmo\ cl\u00E1sico\ e\ interesante.\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment3.params=x
comment3.target=void\ addLast(Comparable)
comment3.text=\nInserta\ un\ objeto\ al\ final\ de\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null\ y\ si\ el\ objeto\ representado\ es\ compatible\ con\ el\ contenido\ actual\ de\ la\ lista\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment4.target=void\ clear()
comment4.text=\nRemueve\ todos\ los\ elementos\ de\ la\ lista.\n\n
comment5.params=x
comment5.target=boolean\ contains(Comparable)
comment5.text=\nDetermina\ si\ en\ la\ lista\ existe\ un\ elemento\ que\ coincida\ con\ x.\ Usamos\ compareTo()\ para\nrealizar\ las\ comparaciones\ (aunque\ podr\u00EDa\ usarse\ equals()).\n@return\ true\ si\ x\ est\u00E1\ en\ la\ lista\ -\ false\ si\ x\ no\ est\u00E1\ o\ si\ x\ es\ null.\n@param\ x\ el\ objeto\ a\ buscar.\n\n
comment6.target=Comparable\ getFirst()
comment6.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ objeto\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ una\ referencia\ al\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment7.target=Comparable\ getLast()
comment7.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ objeto\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ una\ referencia\ al\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment8.target=Comparable\ removeLast()
comment8.text=\nRetorna\ (y\ remueve)\ el\ objeto\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ el\ \u00FAltimo\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment9.target=Comparable\ removeFirst()
comment9.text=\nRetorna\ (y\ remueve)\ el\ objeto\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ el\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
numComments=13
