#BlueJ class context
comment0.target=SimpleList()
comment0.text=\nConstructor\ por\ defecto\n\n
comment1.params=x
comment1.target=void\ addFirst(E)
comment1.text=\nInserta\ un\ objeto\ al\ principio\ de\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null.\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment10.target=E\ removeFirst()
comment10.text=\nRetorna\ (y\ remueve)\ el\ objeto\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ el\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment11.target=void\ startIterator()
comment11.text=\nInicializa\ el\ mecanismo\ de\ recorrido.\ Hace\ que\ la\ pr\u00F3xima\ invocaci\u00F3n\ a\ next()\ retorne\ el\ primer\ objeto\ de\nla\ lista.\ Forma\ parte\ de\ nuestra\ implementaci\u00F3n\ liviana\ del\ patr\u00F3n\ Iterator.\ En\ la\ clase\ LinkedList\ de\ Java,\ \nnuestro\ m\u00E9todo\ ser\u00EDa\ equivalente\ a\ invocar\ al\ m\u00E9todo\ iterator(),\ el\ cual\ retorna\ un\ objeto\ de\ la\ clase\ \nIterator\ (predefinida\ de\ Java).\ Decidimos\ cambiar\ el\ nombre\ por\ razones\ de\ claridad.\n\n
comment12.target=String\ toString()
comment12.text=\nRedefine\ el\ m\u00E9todo\ toString\ heredado\ desde\ Object.\n@return\ el\ contenido\ de\ la\ lista\ convertido\ a\ String.\n\n
comment2.params=x
comment2.target=void\ addLast(E)
comment2.text=\nInserta\ un\ objeto\ al\ final\ de\ la\ lista.\ La\ inserci\u00F3n\ se\ har\u00E1\ s\u00F3lo\ si\ el\ par\u00E1metro\ recibido\ \nno\ es\ null.\n@param\ x\ el\ objeto\ a\ almacenar\ en\ la\ lista.\n\n
comment3.target=void\ clear()
comment3.text=\nRemueve\ todos\ los\ elementos\ de\ la\ lista.\n\n
comment4.target=E\ getFirst()
comment4.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ objeto\ ubicado\ al\ principio\ de\ la\ lista.\ \n@return\ una\ referencia\ al\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment5.target=E\ getLast()
comment5.text=\nRetorna\ (pero\ sin\ removerlo)\ el\ objeto\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ una\ referencia\ al\ primer\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
comment6.target=boolean\ hasNext()
comment6.text=\nIndica\ si\ queda\ alg\u00FAn\ objeto\ en\ el\ recorrido\ del\ iterador.\ Se\ incorpora\ para\ cumplir\ nuestra\ \nimplementaci\u00F3n\ liviana\ del\ patr\u00F3n\ Iterator.\ Corresponde\ al\ m\u00E9todo\ hasNext()\ de\ la\ clase\nIterator\ del\ lenguaje\ Java.\n@return\ true\ si\ queda\ alg\u00FAn\ objeto\ en\ el\ recorrido\ -\ false\ si\ no\ quedan\ objetos.\n\n
comment7.target=boolean\ isEmpty()
comment7.text=\nRetorna\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa.\n@return\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa\ -\ false\ en\ caso\ contrario.\n\n
comment8.target=E\ next()
comment8.text=\nRetorna\ el\ siguiente\ objeto\ en\ el\ recorrido\ del\ iterador.\ Se\ incorpora\ para\ cumplir\ nuestra\ \nimplementaci\u00F3n\ liviana\ del\ patr\u00F3n\ Iterator.\ Corresponde\ al\ m\u00E9todo\ next()\ de\ la\ clase\ Iterator\ \ndel\ lenguaje\ Java.\n@return\ el\ siguiente\ objeto\ en\ el\ recorrido.\n@throws\ NoSuchElementException\ si\ la\ lista\ est\u00E1\ vac\u00EDa\ o\ en\ la\ lista\ no\ quedan\ elementos\ por\ recorrer.\n\n
comment9.target=E\ removeLast()
comment9.text=\nRetorna\ (y\ remueve)\ el\ objeto\ ubicado\ al\ final\ de\ la\ lista.\ \n@return\ el\ \u00FAltimo\ elemento\ de\ la\ lista.\n@throws\ NoSuchElementException\ si\ la\ lista\ estaba\ vac\u00EDa.\n\n
numComments=13
