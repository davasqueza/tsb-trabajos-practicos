#BlueJ class context
comment0.target=Termino()
comment0.text=\nConstructor\ por\ defecto.\ Asigna\ frecuencia\ 1\ al\ objeto\ creado\n\n
comment1.params=p
comment1.target=Termino(String)
comment1.text=\nInicializa\ con\ el\ par\u00E1metro,\ y\ pone\ frecuencia\ igual\ a\ 1\n\n
comment10.params=o
comment10.target=int\ compareTo(Object)
comment10.text=\nPermite\ comparar\ el\ contenido\ de\ informaci\u00F3n\ de\ un\ objeto\ \ con\ el\ de\ otro\ que\ viene\ como\ par\u00E1metro.\n@param\ o\ el\ objeto\ a\ comparar.\n@return\ un\ valor\ int\:\ \ 0\ si\ eran\ iguales,\ >0\ si\ el\ impl\u00EDcito\ era\ mayor,\ <0\ si\ el\ impl\u00EDcito\ era\ menor.\n@throws\ ClassCastException\ si\ se\ intenta\ moldear\ a\ una\ clase\ incompatible.\n\n
comment2.params=p\ s
comment2.target=Termino(String,\ String)
comment2.text=\nInicializa\ con\ los\ par\u00E1metros,\ y\ pone\ frecuencia\ igual\ a\ 1\n\n
comment3.target=String\ getPalabra()
comment3.text=\nM\u00E9todo\ de\ acceso\ al\ valor\ de\ la\ palabra\n@return\ el\ valor\ de\ la\ palabra\n\n
comment4.target=String\ getSignificado()
comment4.text=\nM\u00E9todo\ de\ acceso\ al\ valor\ del\ significado\n@return\ el\ valor\ del\ significado\n\n
comment5.params=c
comment5.target=void\ setPalabra(String)
comment5.text=\nM\u00E9todo\ modificador\ de\ la\ palabra\n@param\ c\ el\ valor\ a\ almacenar\ como\ palabra\ \n\n
comment6.params=c
comment6.target=void\ setSignificado(String)
comment6.text=\nM\u00E9todo\ modificador\ del\ significado\n@param\ c\ el\ valor\ a\ almacenar\ como\ significado\ \n\n
comment7.target=String\ toString()
comment7.text=\nM\u00E9todo\ para\ redefinir\ el\ m\u00E9todo\ toString\ heredado\ desde\ Object\n@return\ \ una\ cadena\ representando\ los\ valores\ contenidos\n\n
comment8.target=int\ hashCode()
comment8.text=\nRedefine\ al\ m\u00E9todo\ hashCode\ heredado\ desde\ Object.\ El\ que\ viene\ desde\ Object,\ retorna\ la\ \ndirecci\u00F3n\ de\ memoria\ del\ objeto,\ convertida\ a\ un\ integer.\ En\ la\ mayor\ parte\ de\ las\ aplicaciones,\nes\ conveniente\ que\ hashCode\ retorne\ el\ valor\ de\ lo\ que\ llamar\u00EDamos\ el\ "campo\ clave"\ del\ objeto\:\ \nel\ campo\ que\ permite\ distinguirlo\ de\ forma\ un\u00EDvoca.\ Si\ el\ objeto\ se\ env\u00EDa\ de\ forma\ polim\u00F3rfica\ a\ \nuna\ estructura\ de\ datos\ que\ necesite\ "ver"\ la\ clave\ del\ objeto\ (por\ ejemplo,\ una\ tabla\ hash),\ \nhashCode\ soluciona\ el\ problema.\ Ver\ la\ documentaci\u00F3n\ de\ Sun\ para\ m\u00E1s\ detalles\ acerca\ de\ lo\ que\ se\ \nespera\ respecto\ del\ m\u00E9todo.\ Si\ el\ atributo\ clave\ es\ un\ String,\ se\ puede\ retornar\ el\ hashCode\ de\ ese\ \nString...\n\n@return\ el\ valor\ del\ atributo\ "clave",\ para\ ser\ usado\ como\ hashCode\ en\ una\ tabla\ hash\ o\ en\ donde\ sea\ \nque\ se\ requiera\ esa\ clave.\n\n
comment9.params=obj
comment9.target=boolean\ equals(Object)
comment9.text=\nRedefine\ al\ m\u00E9todo\ equals\ heredado\ desde\ Object.\ El\ que\ viene\ desde\ Object\ compara\ las\ direcciones\ de\ \nmemoria\ de\ los\ dos\ objetos,\ y\ retorna\ true\ si\ ambas\ referencias\ apuntan\ al\ mismo\ objeto,\ o\ false\ en\ \ncaso\ contrario.\ Siempre\ que\ se\ redefina\ hashCode,\ deber\u00EDa\ redefinirse\ equals,\ para\ mantener\ la\ consistencia\ \nen\ cuanto\ a\ la\ especificaci\u00F3n\ te\u00F3rica\ de\ cada\ uno\ de\ ellos.\ La\ idea\ general\ es\ que\ si\ equals\ dice\ que\ dos\ \nobjetos\ son\ iguales,\ entonces\ hashCode\ deber\u00EDa\ devolver\ el\ mismo\ valor\ int\ para\ los\ dos.\n\n@param\ obj\ el\ objeto\ contra\ el\ cual\ se\ compara.\n@return\ true\ si\ se\ considera\ que\ los\ objetos\ son\ iguales.\n\n
numComments=11
